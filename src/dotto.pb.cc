// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/dotto.proto

#include "src/dotto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_src_2fdotto_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fdotto_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fdotto_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SongMap_Config;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_src_2fdotto_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SongMap_Element;
}  // namespace protobuf_src_2fdotto_2eproto
class PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point>
      _instance;
} _Point_default_instance_;
class SongMap_ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SongMap_Config>
      _instance;
} _SongMap_Config_default_instance_;
class SongMap_ElementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SongMap_Element>
      _instance;
  const ::Point* location_;
  int transition_;
} _SongMap_Element_default_instance_;
class SongMapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SongMap>
      _instance;
} _SongMap_default_instance_;
namespace protobuf_src_2fdotto_2eproto {
static void InitDefaultsPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Point_default_instance_;
    new (ptr) ::Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint}, {}};

static void InitDefaultsSongMap_Config() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SongMap_Config_default_instance_;
    new (ptr) ::SongMap_Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SongMap_Config::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SongMap_Config =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSongMap_Config}, {}};

static void InitDefaultsSongMap_Element() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SongMap_Element_default_instance_;
    new (ptr) ::SongMap_Element();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SongMap_Element::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SongMap_Element =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSongMap_Element}, {
      &protobuf_src_2fdotto_2eproto::scc_info_Point.base,}};

static void InitDefaultsSongMap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SongMap_default_instance_;
    new (ptr) ::SongMap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SongMap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SongMap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSongMap}, {
      &protobuf_src_2fdotto_2eproto::scc_info_SongMap_Config.base,
      &protobuf_src_2fdotto_2eproto::scc_info_SongMap_Element.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SongMap_Config.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SongMap_Element.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SongMap.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Point, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SongMap_Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SongMap_Config, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SongMap_Config, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SongMap_Config, time_to_press_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SongMap_Element, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SongMap_Element, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SongMap_Element, elem_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SongMap_Element, timestamp_),
  offsetof(::SongMap_ElementDefaultTypeInternal, location_),
  offsetof(::SongMap_ElementDefaultTypeInternal, transition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SongMap_Element, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SongMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SongMap, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SongMap, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SongMap, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SongMap, difficulty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SongMap, mapper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SongMap, producer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SongMap, configs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SongMap, elements_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Point)},
  { 7, -1, sizeof(::SongMap_Config)},
  { 15, -1, sizeof(::SongMap_Element)},
  { 25, -1, sizeof(::SongMap)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SongMap_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SongMap_Element_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SongMap_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "src/dotto.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017src/dotto.proto\"\035\n\005Point\022\t\n\001x\030\001 \001(\005\022\t\n"
      "\001y\030\002 \001(\005\"\361\003\n\007SongMap\022\n\n\002id\030\001 \001(\t\022\014\n\004name"
      "\030\002 \001(\t\022\022\n\nstart_time\030\003 \001(\005\022\022\n\ndifficulty"
      "\030\004 \001(\005\022\016\n\006mapper\030\005 \003(\t\022\020\n\010producer\030\006 \003(\t"
      "\022 \n\007configs\030\007 \003(\0132\017.SongMap.Config\022\"\n\010el"
      "ements\030\010 \003(\0132\020.SongMap.Element\032A\n\006Config"
      "\022\021\n\ttimestamp\030\001 \001(\005\022\r\n\005speed\030\002 \001(\005\022\025\n\rti"
      "me_to_press\030\003 \001(\005\032\370\001\n\007Element\022)\n\telem_ty"
      "pe\030\001 \001(\0162\026.SongMap.Element.Etype\022\021\n\ttime"
      "stamp\030\002 \001(\005\022\032\n\010location\030\003 \001(\0132\006.PointH\000\022"
      ",\n\ntransition\030\004 \001(\0162\026.SongMap.Element.Tw"
      "eenH\000\"/\n\005Tween\022\n\n\006LINEAR\020\000\022\013\n\007SERPENT\020\001\022"
      "\r\n\tPARABOLIC\020\002\",\n\005Etype\022\013\n\007DT_NOTE\020\000\022\r\n\t"
      "SLID_NOTE\020\001\022\007\n\003POS\020\002B\006\n\004datab\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 556);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "src/dotto.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_src_2fdotto_2eproto
const ::google::protobuf::EnumDescriptor* SongMap_Element_Tween_descriptor() {
  protobuf_src_2fdotto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fdotto_2eproto::file_level_enum_descriptors[0];
}
bool SongMap_Element_Tween_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SongMap_Element_Tween SongMap_Element::LINEAR;
const SongMap_Element_Tween SongMap_Element::SERPENT;
const SongMap_Element_Tween SongMap_Element::PARABOLIC;
const SongMap_Element_Tween SongMap_Element::Tween_MIN;
const SongMap_Element_Tween SongMap_Element::Tween_MAX;
const int SongMap_Element::Tween_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SongMap_Element_Etype_descriptor() {
  protobuf_src_2fdotto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_src_2fdotto_2eproto::file_level_enum_descriptors[1];
}
bool SongMap_Element_Etype_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SongMap_Element_Etype SongMap_Element::DT_NOTE;
const SongMap_Element_Etype SongMap_Element::SLID_NOTE;
const SongMap_Element_Etype SongMap_Element::POS;
const SongMap_Element_Etype SongMap_Element::Etype_MIN;
const SongMap_Element_Etype SongMap_Element::Etype_MAX;
const int SongMap_Element::Etype_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Point::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fdotto_2eproto::scc_info_Point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  ::protobuf_src_2fdotto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fdotto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point& Point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fdotto_2eproto::scc_info_Point.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Point)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_src_2fdotto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fdotto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SongMap_Config::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SongMap_Config::kTimestampFieldNumber;
const int SongMap_Config::kSpeedFieldNumber;
const int SongMap_Config::kTimeToPressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SongMap_Config::SongMap_Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fdotto_2eproto::scc_info_SongMap_Config.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SongMap.Config)
}
SongMap_Config::SongMap_Config(const SongMap_Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_to_press_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(time_to_press_));
  // @@protoc_insertion_point(copy_constructor:SongMap.Config)
}

void SongMap_Config::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_to_press_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(time_to_press_));
}

SongMap_Config::~SongMap_Config() {
  // @@protoc_insertion_point(destructor:SongMap.Config)
  SharedDtor();
}

void SongMap_Config::SharedDtor() {
}

void SongMap_Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SongMap_Config::descriptor() {
  ::protobuf_src_2fdotto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fdotto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SongMap_Config& SongMap_Config::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fdotto_2eproto::scc_info_SongMap_Config.base);
  return *internal_default_instance();
}


void SongMap_Config::Clear() {
// @@protoc_insertion_point(message_clear_start:SongMap.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_to_press_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(time_to_press_));
  _internal_metadata_.Clear();
}

bool SongMap_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SongMap.Config)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 speed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 time_to_press = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_to_press_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SongMap.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SongMap.Config)
  return false;
#undef DO_
}

void SongMap_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SongMap.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timestamp(), output);
  }

  // int32 speed = 2;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->speed(), output);
  }

  // int32 time_to_press = 3;
  if (this->time_to_press() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time_to_press(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SongMap.Config)
}

::google::protobuf::uint8* SongMap_Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SongMap.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timestamp(), target);
  }

  // int32 speed = 2;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->speed(), target);
  }

  // int32 time_to_press = 3;
  if (this->time_to_press() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time_to_press(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SongMap.Config)
  return target;
}

size_t SongMap_Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SongMap.Config)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timestamp());
  }

  // int32 speed = 2;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speed());
  }

  // int32 time_to_press = 3;
  if (this->time_to_press() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time_to_press());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SongMap_Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SongMap.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const SongMap_Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SongMap_Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SongMap.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SongMap.Config)
    MergeFrom(*source);
  }
}

void SongMap_Config::MergeFrom(const SongMap_Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SongMap.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.time_to_press() != 0) {
    set_time_to_press(from.time_to_press());
  }
}

void SongMap_Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SongMap.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SongMap_Config::CopyFrom(const SongMap_Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SongMap.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SongMap_Config::IsInitialized() const {
  return true;
}

void SongMap_Config::Swap(SongMap_Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SongMap_Config::InternalSwap(SongMap_Config* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(speed_, other->speed_);
  swap(time_to_press_, other->time_to_press_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SongMap_Config::GetMetadata() const {
  protobuf_src_2fdotto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fdotto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SongMap_Element::InitAsDefaultInstance() {
  ::_SongMap_Element_default_instance_.location_ = const_cast< ::Point*>(
      ::Point::internal_default_instance());
  ::_SongMap_Element_default_instance_.transition_ = 0;
}
void SongMap_Element::set_allocated_location(::Point* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
    data_.location_ = location;
  }
  // @@protoc_insertion_point(field_set_allocated:SongMap.Element.location)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SongMap_Element::kElemTypeFieldNumber;
const int SongMap_Element::kTimestampFieldNumber;
const int SongMap_Element::kLocationFieldNumber;
const int SongMap_Element::kTransitionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SongMap_Element::SongMap_Element()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fdotto_2eproto::scc_info_SongMap_Element.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SongMap.Element)
}
SongMap_Element::SongMap_Element(const SongMap_Element& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&elem_type_, &from.elem_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&elem_type_)) + sizeof(timestamp_));
  clear_has_data();
  switch (from.data_case()) {
    case kLocation: {
      mutable_location()->::Point::MergeFrom(from.location());
      break;
    }
    case kTransition: {
      set_transition(from.transition());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SongMap.Element)
}

void SongMap_Element::SharedCtor() {
  ::memset(&elem_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&elem_type_)) + sizeof(timestamp_));
  clear_has_data();
}

SongMap_Element::~SongMap_Element() {
  // @@protoc_insertion_point(destructor:SongMap.Element)
  SharedDtor();
}

void SongMap_Element::SharedDtor() {
  if (has_data()) {
    clear_data();
  }
}

void SongMap_Element::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SongMap_Element::descriptor() {
  ::protobuf_src_2fdotto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fdotto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SongMap_Element& SongMap_Element::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fdotto_2eproto::scc_info_SongMap_Element.base);
  return *internal_default_instance();
}


void SongMap_Element::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:SongMap.Element)
  switch (data_case()) {
    case kLocation: {
      delete data_.location_;
      break;
    }
    case kTransition: {
      // No need to clear
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void SongMap_Element::Clear() {
// @@protoc_insertion_point(message_clear_start:SongMap.Element)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&elem_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&elem_type_)) + sizeof(timestamp_));
  clear_data();
  _internal_metadata_.Clear();
}

bool SongMap_Element::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SongMap.Element)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .SongMap.Element.Etype elem_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_elem_type(static_cast< ::SongMap_Element_Etype >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Point location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SongMap.Element.Tween transition = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_transition(static_cast< ::SongMap_Element_Tween >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SongMap.Element)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SongMap.Element)
  return false;
#undef DO_
}

void SongMap_Element::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SongMap.Element)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SongMap.Element.Etype elem_type = 1;
  if (this->elem_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->elem_type(), output);
  }

  // int32 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timestamp(), output);
  }

  // .Point location = 3;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_location(), output);
  }

  // .SongMap.Element.Tween transition = 4;
  if (has_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->transition(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SongMap.Element)
}

::google::protobuf::uint8* SongMap_Element::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SongMap.Element)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SongMap.Element.Etype elem_type = 1;
  if (this->elem_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->elem_type(), target);
  }

  // int32 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timestamp(), target);
  }

  // .Point location = 3;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_location(), deterministic, target);
  }

  // .SongMap.Element.Tween transition = 4;
  if (has_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->transition(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SongMap.Element)
  return target;
}

size_t SongMap_Element::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SongMap.Element)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .SongMap.Element.Etype elem_type = 1;
  if (this->elem_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->elem_type());
  }

  // int32 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timestamp());
  }

  switch (data_case()) {
    // .Point location = 3;
    case kLocation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_.location_);
      break;
    }
    // .SongMap.Element.Tween transition = 4;
    case kTransition: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->transition());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SongMap_Element::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SongMap.Element)
  GOOGLE_DCHECK_NE(&from, this);
  const SongMap_Element* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SongMap_Element>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SongMap.Element)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SongMap.Element)
    MergeFrom(*source);
  }
}

void SongMap_Element::MergeFrom(const SongMap_Element& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SongMap.Element)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.elem_type() != 0) {
    set_elem_type(from.elem_type());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  switch (from.data_case()) {
    case kLocation: {
      mutable_location()->::Point::MergeFrom(from.location());
      break;
    }
    case kTransition: {
      set_transition(from.transition());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void SongMap_Element::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SongMap.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SongMap_Element::CopyFrom(const SongMap_Element& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SongMap.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SongMap_Element::IsInitialized() const {
  return true;
}

void SongMap_Element::Swap(SongMap_Element* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SongMap_Element::InternalSwap(SongMap_Element* other) {
  using std::swap;
  swap(elem_type_, other->elem_type_);
  swap(timestamp_, other->timestamp_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SongMap_Element::GetMetadata() const {
  protobuf_src_2fdotto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fdotto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SongMap::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SongMap::kIdFieldNumber;
const int SongMap::kNameFieldNumber;
const int SongMap::kStartTimeFieldNumber;
const int SongMap::kDifficultyFieldNumber;
const int SongMap::kMapperFieldNumber;
const int SongMap::kProducerFieldNumber;
const int SongMap::kConfigsFieldNumber;
const int SongMap::kElementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SongMap::SongMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_src_2fdotto_2eproto::scc_info_SongMap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SongMap)
}
SongMap::SongMap(const SongMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mapper_(from.mapper_),
      producer_(from.producer_),
      configs_(from.configs_),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&difficulty_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(difficulty_));
  // @@protoc_insertion_point(copy_constructor:SongMap)
}

void SongMap::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&difficulty_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(difficulty_));
}

SongMap::~SongMap() {
  // @@protoc_insertion_point(destructor:SongMap)
  SharedDtor();
}

void SongMap::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SongMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SongMap::descriptor() {
  ::protobuf_src_2fdotto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fdotto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SongMap& SongMap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_src_2fdotto_2eproto::scc_info_SongMap.base);
  return *internal_default_instance();
}


void SongMap::Clear() {
// @@protoc_insertion_point(message_clear_start:SongMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mapper_.Clear();
  producer_.Clear();
  configs_.Clear();
  elements_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&difficulty_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(difficulty_));
  _internal_metadata_.Clear();
}

bool SongMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SongMap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SongMap.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SongMap.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 difficulty = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string mapper = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mapper()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mapper(this->mapper_size() - 1).data(),
            static_cast<int>(this->mapper(this->mapper_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SongMap.mapper"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string producer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_producer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->producer(this->producer_size() - 1).data(),
            static_cast<int>(this->producer(this->producer_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SongMap.producer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SongMap.Config configs = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_configs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SongMap.Element elements = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_elements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SongMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SongMap)
  return false;
#undef DO_
}

void SongMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SongMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SongMap.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SongMap.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int32 start_time = 3;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_time(), output);
  }

  // int32 difficulty = 4;
  if (this->difficulty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->difficulty(), output);
  }

  // repeated string mapper = 5;
  for (int i = 0, n = this->mapper_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mapper(i).data(), static_cast<int>(this->mapper(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SongMap.mapper");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->mapper(i), output);
  }

  // repeated string producer = 6;
  for (int i = 0, n = this->producer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->producer(i).data(), static_cast<int>(this->producer(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SongMap.producer");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->producer(i), output);
  }

  // repeated .SongMap.Config configs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->configs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->configs(static_cast<int>(i)),
      output);
  }

  // repeated .SongMap.Element elements = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elements_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->elements(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SongMap)
}

::google::protobuf::uint8* SongMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SongMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SongMap.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SongMap.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // int32 start_time = 3;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start_time(), target);
  }

  // int32 difficulty = 4;
  if (this->difficulty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->difficulty(), target);
  }

  // repeated string mapper = 5;
  for (int i = 0, n = this->mapper_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mapper(i).data(), static_cast<int>(this->mapper(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SongMap.mapper");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->mapper(i), target);
  }

  // repeated string producer = 6;
  for (int i = 0, n = this->producer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->producer(i).data(), static_cast<int>(this->producer(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SongMap.producer");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->producer(i), target);
  }

  // repeated .SongMap.Config configs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->configs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->configs(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SongMap.Element elements = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elements_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->elements(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SongMap)
  return target;
}

size_t SongMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SongMap)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string mapper = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->mapper_size());
  for (int i = 0, n = this->mapper_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mapper(i));
  }

  // repeated string producer = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->producer_size());
  for (int i = 0, n = this->producer_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->producer(i));
  }

  // repeated .SongMap.Config configs = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->configs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->configs(static_cast<int>(i)));
    }
  }

  // repeated .SongMap.Element elements = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->elements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->elements(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 start_time = 3;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start_time());
  }

  // int32 difficulty = 4;
  if (this->difficulty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->difficulty());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SongMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SongMap)
  GOOGLE_DCHECK_NE(&from, this);
  const SongMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SongMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SongMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SongMap)
    MergeFrom(*source);
  }
}

void SongMap::MergeFrom(const SongMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SongMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mapper_.MergeFrom(from.mapper_);
  producer_.MergeFrom(from.producer_);
  configs_.MergeFrom(from.configs_);
  elements_.MergeFrom(from.elements_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.difficulty() != 0) {
    set_difficulty(from.difficulty());
  }
}

void SongMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SongMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SongMap::CopyFrom(const SongMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SongMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SongMap::IsInitialized() const {
  return true;
}

void SongMap::Swap(SongMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SongMap::InternalSwap(SongMap* other) {
  using std::swap;
  mapper_.InternalSwap(CastToBase(&other->mapper_));
  producer_.InternalSwap(CastToBase(&other->producer_));
  CastToBase(&configs_)->InternalSwap(CastToBase(&other->configs_));
  CastToBase(&elements_)->InternalSwap(CastToBase(&other->elements_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_time_, other->start_time_);
  swap(difficulty_, other->difficulty_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SongMap::GetMetadata() const {
  protobuf_src_2fdotto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_src_2fdotto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Point* Arena::CreateMaybeMessage< ::Point >(Arena* arena) {
  return Arena::CreateInternal< ::Point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SongMap_Config* Arena::CreateMaybeMessage< ::SongMap_Config >(Arena* arena) {
  return Arena::CreateInternal< ::SongMap_Config >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SongMap_Element* Arena::CreateMaybeMessage< ::SongMap_Element >(Arena* arena) {
  return Arena::CreateInternal< ::SongMap_Element >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SongMap* Arena::CreateMaybeMessage< ::SongMap >(Arena* arena) {
  return Arena::CreateInternal< ::SongMap >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
